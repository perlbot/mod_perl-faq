                    18:16 <tm604> pink_mist: examples of what mod_perl *is* useful for (modifying/adding vhosts, integrating with authz and authen layers, etc)
                    18:17 <pink_mist> ah good call
                    18:17 <tm604> things that are exasperating at best - writing tests (still no decent mock Apache2? request/API objects), documentation...
                    18:17 <tm604> portability
                    18:19 <tm604> too much memory usage - tying up a process just to answer a slow client sucks, and having to stick a reverse proxy in just to work around it? might as well have used perl for the http backend originally then
                    18:19 <tm604> the circle of perdition reserved for Apache::Registry
                    18:20 <tm604> graceful restarts that leave processes in limbo
                    18:20 <pink_mist> tm604++ # continue P
                    18:21 <pink_mist> *:P
                    18:21 <tm604> I'll pause here to think happy thoughts
                    18:23 <tm604> I think one of the biggest flaws in the apache/mod_perl model from a sysadmin point of view is the lack of user separation
                    18:23 <tm604> since everything's in one big happy process, you're running as the same user who can reconfigure apache itself
                    18:24 <tm604> external FastCGI processes can run as a completely separate account with no access whatsoever to apache files, just communicating over a port or unix socket.
                    18:24 <mst> and given a unix socket, zero downtime upgrades are trivial
                    18:25 <mst> which is why I keep getting annoyed when people do starman-over-TCP for everything
                    18:25 <ilmari> tm604: if your apache user has write access to the config or data it's serving, you're doing it wrong
                    18:25 <tm604> ilmari: read access as well
                    18:25 <LeoNerd> And one day when someone writes the super-efficient HTTP-to-FastCGI epoll+splice multiplexer, your site will run super-fast ;)
                    18:25 <LeoNerd> I just haven't got time yet
                    18:26 <tm604> which means access to data that really shouldn't be accessible to the webapp
                    18:27 <tm604> LeoNerd: several already exist?
                    18:27  * jsn has been writing mod_perl since about 2000. Maybe, tm604, the code is running as a user with power, but the developers can’t check in arbitrary code, so, I’m the security. 
                    18:28 <LeoNerd> tm604: Ooh... really? Hmm
                    18:29 <jsn> I really looked into plack, I just didn’t see the advantage, because I’ve already worked through all the beginner’s troubles one experiences with mod_perl
                    18:29 <tm604> jsn: security is more about layers than overconfidence
                    18:29 <ilmari> jsn: not being tied to a specific web server is useful
                    18:29 <tm604> my biggest reason for not using mod_perl (other than vhost management in a few places) is simple: it doesn't integrate with event loops
                    18:30 <tm604> restricting yourself to a model which uses an event loop and poking around in the internals to get access to it yourself is on the level of "possible but why bother"
                    18:30 <jsn> I meant with regards to the code running as such-and-such user. If the developers could check in arbitrary code, I would worry.
                    18:31 <tm604> secondary reason: SPDY/HTTP2, if your app wants to take advantage of server push and other features, good luck convincing mod_perl to pass that through
                    18:31 <jsn> I’m not much of an event programmer, I am fine with REST. The only time I needed event stuff I used POE for my IRC bots.
                    18:31 <tm604> REST and event loops are somewhat orthogonal
                    18:31 <jsn> oh
                    18:32 <tm604> write data when you have it, read data when it's available, do stuff if you can, wait if you can't. one process can handle many active HTTP requests.
                    18:35 <jsn> Well, for my code, the time it takes to move the webpage is going to be often greater than the time it takes to generate a page’s content, so, I don’t miss much there.
                    18:35 <jsn> s/move the webpage/get the webpage across the internet/
                    18:36 <tm604> exactly why async is a better model - network is typically the slow point
                    18:36 <tm604> with mod_perl, your process is tied up waiting for the modem user to receive bytes, or you have to stick a reverse proxy in the mix
                    18:37 <jsn> Oh, I see.
                    18:37 <tm604> and apache processes are heavy.
                    18:37 <jsn> Isn’t everyone with mod_perl spposed to have a lightweight server in there?
                    18:38 <tm604> lightweight server for what? static content?
                    18:38 <jsn> that, and, who knows, handing off bytes so the heavy process doesn’t have to wait?
                    18:39 <jsn> You really don’t think, once http2 comes out, that mod_perl won’t handle it? Seems odd.
                    18:39 <tm604> okay, so now you have up to three webserving components - static content, mod_perl and reverse proxy to avoid tying up mod_perl processes
                    18:39 <tm604> Have you tried using SPDY with mod_perl?
                    18:41 <tm604> The relevant parts of HTTP2 are based on the same model as SPDY. Final consensus is expected next month (once the wg finishes arguing about header limitations and stateful compression).
                    18:41 <jsn> I have never used SPDY. Sounds like something a simple mod_perl phase handler, maybe cleanup, could handle
                    18:43 <tm604> jsn: cleanup? uh... no. have a look at the SPDY spec or HTTP2 drafts if you're interested. Basically, mod_perl *could* support it, but I doubt it will any time soon.
                    18:43 <tm604> given that it doesn't already, and SPDY's been around for a few years
                    18:43 <DrForr> jsn: mod_perl was only ever meant to help configure Apache, the fact that you can write a web application layer on top of it was *never* the intent.
                    18:44 <jsn> tm604: I just read the wiki page, and it sounded like SPDY does compression, “tokenized” (whatever that is) and simplified (however that is accomplished).
                    18:44 <tm604> jsn: it's far more than that - features include server push, multiple streams over single TCP connection, rate limiting and windowing
